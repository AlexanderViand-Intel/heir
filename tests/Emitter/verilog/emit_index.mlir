// RUN: heir-translate --emit-verilog %s | FileCheck %s

// CHECK: module sub_bytes(
// CHECK:   input wire signed [7:0] [[arg1:.*]],
// CHECK:   output wire signed [7:0] [[_out_0:.*]]
// CHECK: );
// CHECK:   wire signed [2047:0] [[v2:.*]];
// CHECK:   wire signed [31:0] [[v3:.*]];
// CHECK:   wire signed [7:0] [[v4:.*]];
// CHECK:   assign [[v2]] = 2048'h16BB54B00F2D99416842E6BF0D89A18CDF2855CEE9871E9B948ED9691198F8E19E1DC186B95735610EF6034866B53E708A8BBD4B1F74DDE8C6B4A61C2E2578BA08AE7A65EAF4566CA94ED58D6D37C8E779E4959162ACD3C25C2406490A3A32E0DB0B5EDE14B8EE4688902A22DC4F816073195D643D7EA7C41744975FEC130CCDD2F3FF1021DAB6BCF5389D928F40A351A89F3C507F02F94585334D43FBAAEFD0CF584C4A39BECB6A5BB1FC20ED00D153842FE329B3D63B52A05A6E1B1A2C830975B227EBE28012079A059618C323C7041531D871F1E5A534CCF73F362693FDB7C072A49CAFA2D4ADF04759FA7DC982CA76ABD7FE2B670130C56F6BF27B777C63;
// CHECK:   assign [[v3]] = $unsigned([[arg1]]);
// CHECK:   assign [[v4]] = [[v2]][7 + 8 * [[v3]] : 8 * [[v3]]];
// CHECK:   assign [[_out_0]] = [[v4]];
// CHECK: endmodule

module {
  memref.global "private" constant @__constant_256xi8 : memref<256xi8> = dense<"0x637C777BF26B6FC53001672BFED7AB76CA82C97DFA5947F0ADD4A2AF9CA472C0B7FD9326363FF7CC34A5E5F171D8311504C723C31896059A071280E2EB27B27509832C1A1B6E5AA0523BD6B329E32F8453D100ED20FCB15B6ACBBE394A4C58CFD0EFAAFB434D338545F9027F503C9FA851A3408F929D38F5BCB6DA2110FFF3D2CD0C13EC5F974417C4A77E3D645D197360814FDC222A908846EEB814DE5E0BDBE0323A0A4906245CC2D3AC629195E479E7C8376D8DD54EA96C56F4EA657AAE08BA78252E1CA6B4C6E8DD741F4BBD8B8A703EB5664803F60E613557B986C11D9EE1F8981169D98E949B1E87E9CE5528DF8CA1890DBFE6426841992D0FB054BB16"> {alignment = 64 : i64}
  func.func @sub_bytes(%arg0: i8 {secret.secret}) -> i8 {
    %0 = memref.get_global @__constant_256xi8 : memref<256xi8>
    %1 = arith.index_cast %arg0 : i8 to index
    %2 = memref.load %0[%1] : memref<256xi8>
    return %2 : i8
  }
}
