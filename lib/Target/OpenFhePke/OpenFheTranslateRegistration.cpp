#include "lib/Target/OpenFhePke/OpenFheTranslateRegistration.h"

#include <string>

#include "lib/Dialect/LWE/IR/LWEDialect.h"
#include "lib/Dialect/ModArith/IR/ModArithDialect.h"
#include "lib/Dialect/Openfhe/IR/OpenfheDialect.h"
#include "lib/Dialect/Polynomial/IR/PolynomialDialect.h"
#include "lib/Dialect/RNS/IR/RNSDialect.h"
#include "lib/Dialect/RNS/IR/RNSTypes.h"
#include "lib/Target/OpenFhePke/OpenFhePkeEmitter.h"
#include "lib/Target/OpenFhePke/OpenFhePkeHeaderEmitter.h"
#include "lib/Target/OpenFhePke/OpenFhePkePybindEmitter.h"
#include "lib/Target/OpenFhePke/OpenFheUtils.h"
#include "llvm/include/llvm/Support/CommandLine.h"       // from @llvm-project
#include "llvm/include/llvm/Support/raw_ostream.h"       // from @llvm-project
#include "mlir/include/mlir/Dialect/Arith/IR/Arith.h"    // from @llvm-project
#include "mlir/include/mlir/Dialect/Func/IR/FuncOps.h"   // from @llvm-project
#include "mlir/include/mlir/Dialect/Tensor/IR/Tensor.h"  // from @llvm-project
#include "mlir/include/mlir/IR/DialectRegistry.h"        // from @llvm-project
#include "mlir/include/mlir/IR/Operation.h"              // from @llvm-project
#include "mlir/include/mlir/IR/Value.h"                  // from @llvm-project
#include "mlir/include/mlir/Support/LLVM.h"              // from @llvm-project
#include "mlir/include/mlir/Tools/mlir-translate/Translation.h"  // from @llvm-project

namespace mlir {
namespace heir {
namespace openfhe {

struct PybindOptions {
  llvm::cl::opt<std::string> pybindHeaderInclude{
      "pybind-header-include",
      llvm::cl::desc(
          "The HEIR-generated header to include for the pybind11 bindings")};
  llvm::cl::opt<std::string> pybindModuleName{
      "pybind-module-name",
      llvm::cl::desc(
          "The name of the generated python module (must match the .so file)")};
};
static llvm::ManagedStatic<PybindOptions> pybindOptions;

void registerTranslateOptions() {
  // Forces initialization of options.
  *options;
  *pybindOptions;
}

void registerToOpenFhePkeTranslation() {
  TranslateFromMLIRRegistration reg(
      "emit-openfhe-pke",
      "translate the openfhe dialect to C++ code against the OpenFHE pke API",
      [](Operation *op, llvm::raw_ostream &output) {
        return translateToOpenFhePke(op, output, options->openfheImportType);
      },
      [](DialectRegistry &registry) {
        registry.insert<arith::ArithDialect, func::FuncDialect,
                        openfhe::OpenfheDialect, lwe::LWEDialect,
                        ::mlir::heir::polynomial::PolynomialDialect,
                        tensor::TensorDialect, mod_arith::ModArithDialect,
                        rns::RNSDialect>();
        rns::registerExternalRNSTypeInterfaces(registry);
      });
}

void registerToOpenFhePkeHeaderTranslation() {
  TranslateFromMLIRRegistration reg(
      "emit-openfhe-pke-header",
      "Emit a header corresponding to the C++ file generated by "
      "--emit-openfhe-pke",
      [](Operation *op, llvm::raw_ostream &output) {
        return translateToOpenFhePkeHeader(op, output,
                                           options->openfheImportType);
      },
      [](DialectRegistry &registry) {
        registry.insert<arith::ArithDialect, func::FuncDialect,
                        tensor::TensorDialect, openfhe::OpenfheDialect,
                        lwe::LWEDialect, rns::RNSDialect,
                        ::mlir::heir::polynomial::PolynomialDialect,
                        mod_arith::ModArithDialect>();
        rns::registerExternalRNSTypeInterfaces(registry);
      });
}

void registerToOpenFhePkePybindTranslation() {
  TranslateFromMLIRRegistration reg(
      "emit-openfhe-pke-pybind",
      "Emit a C++ file containing pybind11 bindings for the input openfhe "
      "dialect IR"
      "--emit-openfhe-pke-pybind",
      [](Operation *op, llvm::raw_ostream &output) {
        return translateToOpenFhePkePybind(op, output,
                                           pybindOptions->pybindHeaderInclude,
                                           pybindOptions->pybindModuleName);
      },
      [](DialectRegistry &registry) {
        registry.insert<arith::ArithDialect, func::FuncDialect,
                        tensor::TensorDialect, openfhe::OpenfheDialect,
                        lwe::LWEDialect,
                        ::mlir::heir::polynomial::PolynomialDialect,
                        mod_arith::ModArithDialect, rns::RNSDialect>();
        rns::registerExternalRNSTypeInterfaces(registry);
      });
}

}  // namespace openfhe
}  // namespace heir
}  // namespace mlir
